#!/bin/bash
#
# --------------------------------------------------------------------
# This script creates a .csv file called 'num_tests.csv' with the
# total number of test cases, number of failing and passing test cases
# per project-bug.
#
# Usage:
# num_tests.sh <DATA_DIR>
#
# Parameters:
#   <DATA_DIR>  Directory with the .tar.gz files generated by GZoltar.
#               (see ../gzoltar/run_gzoltar.sh). This directory should
#               has the following structure/files:
#                 <DATA_DIR>/<project_name>/<project_name>-<bug_id>-gzoltar-files.tar.gz
#
# Environment variables:
# - D4J_HOME    Needs to be set and must point to the Defects4J
#               installation.
# --------------------------------------------------------------------

##
# Print error message to the stderr and exit
##
die() {
  echo "$@" >&2
  exit 1
}

SCRIPT_DIR=$(cd `dirname $0` && pwd)

# Check whether D4J_HOME is set
[ "$D4J_HOME" != "" ] || die "D4J_HOME is not set!"

USAGE="Usage: $0 <data dir>"
[ $# -eq 1 ] || die "$USAGE"
DATA_DIR="$1"
TOOL="developer" # TODO at the moment we just have manually-written test suites

BLACKLIST_FILE="$SCRIPT_DIR/blacklist.csv"
if [ ! -s "$BLACKLIST_FILE" ]; then
  die "File '$BLACKLIST_FILE' does not exit or is empty!"
fi

OUTPUT_FILE="$SCRIPT_DIR/num_tests.csv"
echo "project_name,bug_id,tool,num_tests,num_failing_tests,num_passing_tests" > "$OUTPUT_FILE"

TMP_DIR="/tmp/num_tests_$$"
rm -rf "$TMP_DIR"; mkdir -p "$TMP_DIR"

# --------------------------------------------------------------- Main

for pid in Chart Closure Lang Math Mockito Time; do
  dir_project="$D4J_HOME/framework/projects/$pid"

  # Get all bugs
  bids=$(cut -f1 -d',' "$dir_project/commit-db")

  # Iterate over all bugs
  for bid in $bids; do
    if grep -q "^$pid,.*,$bid," "$BLACKLIST_FILE"; then
      continue
    fi

    if [ "$bid" -gt "1000" ]; then
      if ! grep -q "^$pid,.*,$bid$" "$D4J_HOME/framework/projects/$pid/mutants_in_scope.csv"; then
        continue # not in scope
      fi
    fi

    echo "$pid-$bid"

    gzoltar_tar_gz_file="$DATA_DIR/$pid/$pid-$bid-gzoltar-files.tar.gz"
    if [ ! -s "$gzoltar_tar_gz_file" ]; then
      die "File '$gzoltar_tar_gz_file' does not exit or is empty!"
    fi

    tar -xzf "$gzoltar_tar_gz_file" -C "$TMP_DIR"
    if [ $? -ne 0 ]; then
      die "It was not possible to successfully extract '$gzoltar_tar_gz_file' to '$TMP_DIR'!"
    fi

    num_tests=$(wc -l "$TMP_DIR/gzoltars/$pid/$bid/matrix" | cut -f1 -d' ')
    num_failing_tests=$(grep " -$" "$TMP_DIR/gzoltars/$pid/$bid/matrix" | wc -l)
    num_passing_tests=$(grep " +$" "$TMP_DIR/gzoltars/$pid/$bid/matrix" | wc -l)

    echo "$pid,$bid,$TOOL,$num_tests,$num_failing_tests,$num_passing_tests" >> "$OUTPUT_FILE"
    rm -rf "$TMP_DIR/gzoltars/$pid/$bid"
  done
done

rm -rf "$TMP_DIR"
echo "DONE!"

# EOF

